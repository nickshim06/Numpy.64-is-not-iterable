import matplotlib.pyplot as plt
import numpy as np
import cv2
import matplotlib.image as mpimg

def make_coordinates(image, line_parameters):
    slope,intercept = line_parameters
    y1 = image.shape[0]
    y2 = int(y1*(3/5))
    x1 = int((y1-intercept)/slope)
    x2 = int((y2-intercept)/slope)
    return np.array([x1,y1,x2,y2])
    
def average_slope_intercept (image, lines):
    left_fit = []
    right_fit = []
    for line in lines:
        x1,y1,x2,y2 = line.reshape(4)
        parameters = np.polyfit((x1,x2),(y1,y2),1)
        print(parameters)
        slope = parameters[0]
        intercept = parameters[1]
        if slope<0:
            left_fit.append((slope,intercept))
        else:
            right_fit.append((slope,intercept))

    left_fit_average = np.average(left_fit, axis=0)
    right_fit_average = np.average(right_fit, axis=0)
    left_line = make_coordinates(image, left_fit_average)
    right_line = make_coordinates(image, right_fit_average)  

    return np.array([left_line, right_line])
    
    
def canny(image_color):
    threshold_low = 50
    threshold_high = 150

    image_c = cv2.cvtColor(image_color, cv2.COLOR_RGB2GRAY)
    image_blurred = cv2.GaussianBlur(image_c, (7, 7), 0)
    image_canny = cv2.Canny(image_blurred, threshold_low, threshold_high)
    
    return image_canny
    
def RegionofInterest(image):
    height = image.shape[0]  
    polygon = np.array([[(200,height),(1100, height), (550,250)]], dtype=np.int32)    
    mask = np.zeros_like(image) 
    cv2.fillPoly(mask, polygon, 255)
    masked_image = cv2.bitwise_and(image, mask)
    return masked_image
    
def display_lines(image, lines):
    line_image = np.zeros_like(image)
    if lines is not None:
        for x1,y1,x2,y2 in lines:
            cv2.line(line_image,(x1,y1),(x2,y2),(255,0,0),10)

    return line_image     
    
image = cv2.imread("test_image.jpg")
can = canny(image)
roi = RegionofInterest(can)

rho = 2            # distance resolution in pixels 
theta = np.pi/180  # angular resolution in radians 
threshold = 100     # minimum number of votes 
min_line_len = 40  # minimum number of pixels making up a line
max_line_gap = 5  # maximum gap in pixels between connectable line segments    

lines = cv2.HoughLinesP(roi, rho, theta, threshold, np.array([]), minLineLength=min_line_len, maxLineGap=max_line_gap)

# Create an empty black image
#line_image = np.zeros((masked_image.shape[0], masked_image.shape[1], 3), dtype=np.uint8)
averaged_lines = average_slope_intercept(image, lines)
line_image = display(image, averaged_lines)

α = 0.8
β = 1
γ = 1    
# Resultant weighted image is calculated as follows: original_img * α + img * β + γ
Image_with_lines = cv2.addWeighted(image, α, line_image, β, γ)

#cv2.imshow('Live Edge Detection Laplace', LiveCamEdgeDetection_Laplace(frame))
cv2.imshow('Result', image)
cv2.imshow('Image with lines', Image_with_lines)
cv2.waitKey(0)

cap.release() # camera release 
cv2.destroyAllWindows()      

